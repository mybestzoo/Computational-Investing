__author__ = 't.bagramyan'

def simulate( dt_start, dt_end, ls_symbols, alloc) :
 #skip 16 hours to close time
 dt_timeofday = dt.timedelta(hours=16)
 #timestamps for closeof every trading day
 ldt_timestamps = du.getNYSEdays(dt_start, dt_end, dt_timeofday)
 #read data
 c_dataobj = da.DataAccess('Yahoo')
 ls_keys = ['open' , 'high' , 'low' , 'close' , 'volume' , 'actual_close']
 ldf_data = c_dataobj.get_data(ldt_timestamps, ls_symbols, ls_keys)
 d_data = dict(zip(ls_keys, ldf_data))
 #calculate portfolio value for every day
 portfolio = np.dot(d_data['close'].values, alloc)
 #calculate daily returns
 rets = portfolio.copy()
 tsu.returnize0(rets)
 #average daily return
 avg = np.average(rets)
 #volatility of daily returns
 volat = np.std(rets)
 #Sharpe ratio
 SR = np.sqrt(252)*avg/volat
 #plot result
 plt.clf()
 fig = plt.figure()
 plt.plot(ldt_timestamps, rets)
 plt.legend('ls_symbols')
 plt.ylabel('Adjusted Close')
 plt.xlabel('Date')
 fig.autofmt_xdate(rotation=45)
 plt.savefig('adjustedclose.pdf', format='pdf')
 
 return (SR, volat, avg);

import QSTK.qstkutil.qsdateutil as du
import QSTK.qstkutil.tsutil as tsu
import QSTK.qstkutil.DataAccess as da

import datetime as dt
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

for h in range(0,10)
	

[SR,volat, avg] = simulate (dt.datetime(2011,1,1) , dt.datetime(2011,12,31) , ['AAPL', 'GLD', 'GOOG', 'XOM'] , [0.4, 0.4, 0.0, 0.2])
#simulate (dt.datetime(2010,1,1) , dt.datetime(2010,12,31) ,  ['AXP', 'HPQ', 'IBM', 'HNZ'] , [0.0, 0.0, 0.0, 1.0])

print ('Sharpe ratio' , SR)
print ('Volatility' , volat)
print ('Average return' , avg)

